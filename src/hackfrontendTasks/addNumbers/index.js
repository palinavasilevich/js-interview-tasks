/**
 * üìù –°–ª–æ–∂–µ–Ω–∏–µ —á–∏—Å–µ–ª, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞–º–∏
 *
 *  –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ arr1 –∏ arr2, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —á–∏—Å–ª–∞, 
 *  –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞.
    - –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–æ–≤ arr1 –∏ arr2 –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É —á–∏—Å–ª–∞.
    - –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç - –æ–¥–Ω–∞ —Ü–∏—Ñ—Ä–∞.
    - –ï—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –µ—Å—Ç—å –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏, –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
    *
 * @param {number[]} arr1
 * @param {number[]} arr2
 * @returns {number[]}
 *
 * @example
    Input 1: [1, 2, 3], [4, 5, 6]
    Output 1: [5, 7, 9]

    Input 2: [5, 4, 4], [4, 5, 6]
    Output 2: [1, 0, 0, 0]
 */

export function addNumbers(arr1, arr2) {
  const num1 = BigInt(arr1.join(""));
  const num2 = BigInt(arr2.join(""));

  return (num1 + num2).toString().split("").map(Number);
}

export function addNumbersSecondVersion(arr1, arr2) {
  const sumArr = [];
  let rest = 0;

  const copyArr1 = [...arr1];
  const copyArr2 = [...arr2];

  while (copyArr1.length < copyArr2.length) copyArr1.unshift(0);
  while (copyArr2.length < copyArr1.length) copyArr2.unshift(0);

  for (let i = copyArr1.length - 1; i >= 0; i--) {
    const sum = copyArr1[i] + copyArr2[i] + rest;
    rest = Math.floor(sum / 10);
    sumArr.unshift(sum % 10);
  }

  if (rest > 0) sumArr.unshift(rest);

  return sumArr;
}
