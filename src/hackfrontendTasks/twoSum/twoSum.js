/**
 * üìù –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—É–º–º—ã
 *
 * Detailed description: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é twoSum(nums, target), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª nums –∏ —á–∏—Å–ª–æ target. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å –¥–≤—É–º—è –∏–Ω–¥–µ–∫—Å–∞–º–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤,
 * —Å—É–º–º–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–≤–Ω–∞ target. –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ –≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ.
 *
 * @param {number[], number} nums target
 * @returns {number[]}
 *
 * @example
 *  Input 1: [3, 3], 6
 *  Output 1: [0, 1]
 *  Input 2: [2, 7, 11, 5, 9, 10, 15], 9
 *  Output 2: [0, 1]
 */

function twoSum(nums, target) {
  const map = new Map();

  for (let i = 0; i < nums.length; i++) {
    const current = nums[i];
    const diff = target - current;

    if (map.has(diff)) {
      return [map.get(diff), i];
    }

    map.set(current, i);
  }
}

const result = twoSum([3, 5, 56, 3], 6);
const result2 = twoSum([2, 7, 11, 5, 9, 10, 15], 9);

console.log("result ===", result);
console.log("result ===", result2);
