/**
 * üìù –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —á–∏—Å–µ–ª –≤ –æ–±—ä–µ–∫—Ç–µ
 *
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª,
 * –Ω–∞—Ö–æ–¥—è—â–∏—Ö—Å—è –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ.
 * –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–∏–º.
 * –ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –Ω–µ—á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏—Ö –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å.
 *
 *
 * @param {any{}} obj
 * @returns {number}
 *
 * @example
 * Input 1: {
            x: 5,
            y: {
                z: 7,
                w: {
                v: -3,
                },
            },
            }
    Output 1: 9


    Input 2: {
            a: "text",
            b: {
                c: true,
                d: null,
                e: 5,
            },
            }
    Output 2: 5
 */

export function recursiveSum(obj) {
  let result = 0;

  for (const key in obj) {
    const currentValue = obj[key];

    if (typeof currentValue === "number") {
      result += currentValue;
    } else if (
      currentValue &&
      currentValue !== null &&
      typeof currentValue === "object"
    ) {
      result += recursiveSum(currentValue);
    }
  }

  return result;
}
