/**
 * üìù –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–µ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–∫–≤
 *
 * –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é –ª–∏—à–Ω–µ–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–∫–≤ 
 * (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–Ω—É—É—É–∂–Ω–æ'), –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, 
 * –≥–¥–µ –∫–∞–∂–¥–∞—è –±—É–∫–≤–∞ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø–æ–¥—Ä—è–¥.
    - –†–µ–≥–∏—Å—Ç—Ä –±—É–∫–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
    - –°–∏–º–≤–æ–ª—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –±—É–∫–≤–∞–º–∏, —Ç–∞–∫–∂–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ, –Ω–æ –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
 *
 * @param {string} paramName
 * @returns {string}
 *
 * @example
    Input 1: "–Ω—É—É—É–∂–Ω–æ"
    Output 1: "–Ω—É–∂–Ω–æ"

    Input 2: "–ª–ª–ª–ª–∏–∏–∏–∏—à—à—à–Ω–∏–π–π–π–π —Ç—Ç—Ç–µ–∫—Å—Ç—Ç—Ç"
    Output 2: "–ª–∏—à–Ω–∏–π —Ç–µ–∫—Å—Ç"
 */

export function removeExtraLetters(str) {
  let result = "";

  for (let i = 0; i < str.length; i++) {
    const currentLetter = str[i];
    const nextLetter = str[i + 1];

    if (currentLetter != nextLetter) {
      result += currentLetter;
    }
  }

  return result;
}

///
export function removeExtraLettersSecondVariant(str) {
  return [...str].reduce((acc, letter, index, arr) => {
    if (letter !== arr[index - 1]) acc += letter;
  }, "");
}

///
export function removeExtraLettersThirdVariant(str) {
  return str.replace(/(.)\1+/g, "$1");
}
