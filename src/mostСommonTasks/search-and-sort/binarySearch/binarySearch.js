/**
 * üìù –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫
 *
 *  –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é binarySearch(arr, target), –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ 
 *  –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –º–∞—Å—Å–∏–≤–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
 *  –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–µ—Ä–Ω–∏—Ç–µ -1.
 *
 * @param {number[]} arr
 * @param {number} target
 * @returns {number}
 *
 * @example
    binarySearch([1, 3, 5, 7, 9], 3); // 1
    binarySearch([1, 3, 5, 7, 9], 7); // 3
    binarySearch([1, 3, 5, 7, 9], 4); // -1
 */

// ‚ö° –ë–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –º–∞—Å—Å–∏–≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
// –ë–µ—Ä—ë–º —Å–µ—Ä–µ–¥–∏–Ω—É –º–∞—Å—Å–∏–≤–∞.
// –ï—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞ = target ‚Üí –Ω–∞—à–ª–∏.
// –ï—Å–ª–∏ target < middle ‚Üí –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–µ–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ.
// –ï—Å–ª–∏ target > middle ‚Üí –∏—â–µ–º —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∞–≤–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ.
// –ü–æ–≤—Ç–æ—Ä—è–µ–º, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º –∏–ª–∏ –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

export function assertEquals(actual, expected, description) {
  const passed = JSON.stringify(actual) === JSON.stringify(expected);
  console.log(`${passed ? "‚úÖ" : "‚ùå"} ${description}`);
}

function binarySearch(arr, target) {
  let left = 0;
  let right = arr.length - 1;

  while (left <= right) {
    const mid = Math.floor((left + right) / 2);

    if (arr[mid] === target) return mid;

    if (arr[mid] < target) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }

  return -1;
}

assertEquals(binarySearch([1, 3, 5, 7, 9], 3), 1, "Base example");
assertEquals(binarySearch([1, 3, 5, 7, 9], 7), 3, "Base example");
assertEquals(binarySearch([1, 3, 5, 7, 9], 4), -1, "Not found");
