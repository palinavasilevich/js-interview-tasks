/**
 * üìù factorial
 *
 *  –ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é factorial(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ n.
 *
 *  –§–∞–∫—Ç–æ—Ä–∏–∞–ª ‚Äî —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n.
 *
 *  –§–æ—Ä–º—É–ª–∞: n! = n √ó (n-1) √ó (n-2) √ó ... √ó 1
 *
 * @param {number} n
 * @returns {number}
 *
 *  @example
    factorial(5); // 120  (5*4*3*2*1)
    factorial(0); // 1    (–ø–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é)
    factorial(1); // 1
 */

function assertEquals(actual, expected, description = "") {
  const passed = JSON.stringify(actual) === JSON.stringify(expected);
  console.log(`result = ${JSON.stringify(actual)}`);
  console.log(`${passed ? "‚úÖ" : "‚ùå"} ${description}`);
}

function factorial(n) {
  if (n === 0) return 1;

  if (n === 1) return n;

  return factorial(n - 1) * n;
}

////////////////////////////

function factorialIterative(n) {
  let result = 1;

  for (let i = 2; i <= n; i++) {
    result *= i;
  }

  return result;
}

assertEquals(factorial(5), 120);
assertEquals(factorial(0), 1);
